<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scrGlobalVars);
hsp = 0; 
vsp = 0; 

moving = false;
onGround = false;
onLadder = false;
onStairs = false;
onElevator = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get input 
kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
kJump = -(keyboard_check_pressed(vk_up) || keyboard_check(ord('W')));
kDown = keyboard_check_pressed(vk_down) || keyboard_check(ord('S'));

// Use input 
move = kLeft + kRight; // 0 if both, -1 if left, 1 if right
vert = kJump + kDown; // 0 both, -1 up, 1 down

var ladder = instance_place(x + hsp, y, objLadder);

if (onGround) {
    hsp += move * global.accel;
    vsp = vert * global.jumpPower;
    if (move == 0 &amp;&amp; hsp != 0) {
        hsp -= sign(hsp);
    }
} else {
    if (onLadder) {
        vsp = vert * global.climbSpeed;
        if (move != 0) {
            if (!place_meeting(x + (48 * move), y, objFloor)) {
                x += 48 * move;
                onLadder = false;
                ladder.beingClimbed = false;
            }
        }
    } else {
        hsp += move; 
    }
    
    if (onStairs) {
        hsp = move * global.stairSpeed;
        vsp = -(move * global.stairSpeed);
    }
    
    if (!onLadder &amp;&amp; !onStairs) {
        vsp += global.grav;
    }
    
    if (onElevator) {
        hsp = 0;
        vsp = 0;
      
    }
}

// Check if on top of platform
if (place_meeting(x, y + 1, objFloor)) { 
    onGround = true;
} else {
    onGround = false;
}

// Ladder Collisions
if (ladder == noone) { 
    onLadder = false;
} else {
    if (vert &lt; 0) {
        hsp = 0;
        x = ladder.x;
        onLadder = true;
        onGround = false;
        ladder.beingClimbed = true;
    }
}

// Stair Collisions
var stair = instance_place(x + (2 * move), y - (2 * move), objStairs);
if (stair == noone) {
    onStairs = false;
} else {
    onStairs = true;
    onGround = false;
}

// H Collisions 
if (place_meeting(x + hsp, y, objFloor)) {
    if (!onStairs) {
        while (!place_meeting(x + sign(hsp), y, objFloor)) { 
            x += sign(hsp); 
        }
        hsp = 0; 
    }
}
hsp = clamp(hsp, -global.maxSpeed, global.maxSpeed);
x += hsp;

// v Collisions 
if (place_meeting(x, y + vsp, objFloor)) { 
    while (!place_meeting(x, y + sign(vsp), objFloor)) {
        y += sign(vsp); 
    } 
    vsp = 0; 
} 
y += vsp;


//Elevator
if (place_meeting(x, y, objElevator)) { 
    onElevator = true;
} else {
    onElevator = false;
}
if (global.Elevator) {
    y -= 100;
    } 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (onElevator) {
  //  y -= 10;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
