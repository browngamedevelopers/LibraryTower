<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hsp = 0; 
vsp = 0; 

moving = false;
onGround = false;
onLadder = false;
onStairs = false;
onElevator = false;

ladder = noone;

self.x = global.spawnX;
self.y = global.spawnY;

image_index = 0;
image_start = 0;
image_end = 47;

foots = audio_play_sound(sndFootsteps, 0, true);
audio_sound_gain(foots, 1, 0);
audio_pause_sound(foots);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get input 
kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
kJump = -(keyboard_check_pressed(vk_up) || keyboard_check(ord('W')));
kDown = keyboard_check_pressed(vk_down) || keyboard_check(ord('S'));

// Use input 
move = kLeft + kRight; // 0 if both, -1 if left, 1 if right
vert = kJump + kDown; // 0 both, -1 up, 1 down

image_speed = 0.75;

if (onGround) {
    hsp += move * global.accel;
    vsp = vert * global.jumpPower;
    if (move == 0) {
        audio_pause_sound(foots);
        if (hsp != 0) { // COMING TO A HALT
            image_start = 48;
            image_end = 72;
            hsp -= sign(hsp);
        } else { // IDLE
            image_start = 0;
            image_end = 48;
        }
    } else { // WALKING
        audio_resume_sound(foots);
        image_xscale = move;
        image_start = 48;
        image_end = 72;
    }
} else {
    if (onLadder) { // ON LADDER
        vsp = vert * global.climbSpeed;
        if (vert != 0) {
            audio_resume_sound(foots);
        } else {
            audio_pause_sound(foots);
        }
        image_start = 72;
        image_end = 96;
        image_speed = abs(vert);
        if (move != 0) { // GETTING OFF LADDER
            if (!place_meeting(x + (48 * move), y, objFloor)) {
                audio_pause_sound(foots);
                image_xscale = move;
                image_start = 105;
                image_end = 107;
                x += 48 * move;
                onLadder = false;
                ladder.beingClimbed = false;
            }
        }
    }
    
    if (onStairs) {
        hsp = move * global.stairSpeed;
        vsp = -(move * global.stairSpeed);
    }
    
    if (!onLadder &amp;&amp; !onStairs) { // FALLING
        audio_pause_sound(foots);
        vsp += global.grav;
        hsp += move / 2;
        if (vsp &gt;= 0) { // Freefall
            image_start = 108;
            image_end = 110;
        }
        //image_speed = 0;
    }
    
    if (onElevator) {
        hsp = 0;
        vsp = 0;
    }
}

// Check if on top of platform
if (place_meeting(x, y + 1, objFloor)) { 
    if(!onGround) {
        audio_resume_sound(foots);
        onGround = true;
        image_start = 0;
        image_end = 48;
    }
} else {
    if(onGround) {
        onGround = false;
        audio_pause_sound(foots);
        if (move != 0) {
            image_xscale = move;
        }
        image_start = 96;
        image_end = 108;
    }
}

if (ladder != noone) {
    ladder.beingClimbed = false;
}

// Ladder Collisions
ladder = instance_place(x + hsp, y, objLadder);
if (ladder == noone) { 
    onLadder = false;
} else {
    if (vert &lt; 0) {
        hsp = 0;
        x = ladder.x;
        onLadder = true;
        onGround = false;
        ladder.beingClimbed = true;
    }
}

// Stair Collisions
var stair = instance_place(x + (hsp * move), y - hsp, objStairs);
if (stair == noone) {
    onStairs = false;
} else {
    onStairs = true;
    onGround = false;
}

// H Collisions 
if (place_meeting(x + hsp, y, objFloor)) {
    if (!onStairs) {
        while (!place_meeting(x + sign(hsp), y, objFloor)) { 
            x += sign(hsp); 
        }
        hsp = 0; 
    }
}
hsp = clamp(hsp, -global.maxSpeed, global.maxSpeed);
x += hsp;

// v Collisions 
if (place_meeting(x, y + vsp, objFloor)) { 
    while (!place_meeting(x, y + sign(vsp), objFloor)) {
        y += sign(vsp); 
    } 
    vsp = 0; 
} 
y += vsp;


// Elevator
if (place_meeting(x, y, objElevator)) { 
    onElevator = true;
} else {
    onElevator = false;
}

if (global.elevator) {
    y -= 100;
}

// Animation
image_index = max(image_start, image_index mod image_end);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
